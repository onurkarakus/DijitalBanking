// <auto-generated />
using System;
using Account.Infrastructure.DbContextInformation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Account.Infrastructure.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    partial class AccountDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Account.Domain.DataModels.AccountCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountCurrency", "Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SeedBatch",
                            CreatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6762),
                            Description = "Türk Lirası",
                            Name = "TRY",
                            UpdatedBy = "SeedBatch",
                            UpdatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6763)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SeedBatch",
                            CreatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6765),
                            Description = "Amerikan Doları",
                            Name = "USD",
                            UpdatedBy = "SeedBatch",
                            UpdatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6766)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "SeedBatch",
                            CreatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6769),
                            Description = "Euro",
                            Name = "EUR",
                            UpdatedBy = "SeedBatch",
                            UpdatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6770)
                        });
                });

            modelBuilder.Entity("Account.Domain.DataModels.AccountInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AccountActive")
                        .HasColumnType("bit");

                    b.Property<int>("AccountCurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int>("BranchCode")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountCurrencyId");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("AccountInformation", "Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountActive = true,
                            AccountCurrencyId = 1,
                            AccountNumber = "456",
                            AccountTypeId = 2,
                            Balance = 1000,
                            BranchCode = 1234,
                            CreatedBy = "SeedBatch",
                            CreatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6808),
                            CustomerId = 1,
                            Suffix = "02",
                            UpdatedBy = "SeedBatch",
                            UpdatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6809)
                        },
                        new
                        {
                            Id = 2,
                            AccountActive = true,
                            AccountCurrencyId = 1,
                            AccountNumber = "1234",
                            AccountTypeId = 1,
                            Balance = 1000,
                            BranchCode = 1234,
                            CreatedBy = "SeedBatch",
                            CreatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6813),
                            CustomerId = 1,
                            Suffix = "01",
                            UpdatedBy = "SeedBatch",
                            UpdatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6814)
                        });
                });

            modelBuilder.Entity("Account.Domain.DataModels.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountType", "Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SeedBatch",
                            CreatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6306),
                            Description = "Vadeli Hesap",
                            Name = "Vadeli Hesap",
                            UpdatedBy = "SeedBatch",
                            UpdatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6336)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SeedBatch",
                            CreatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6344),
                            Description = "Vadesiz Hesap",
                            Name = "Vadesiz Hesap",
                            UpdatedBy = "SeedBatch",
                            UpdatedDate = new DateTime(2023, 6, 29, 15, 34, 18, 68, DateTimeKind.Local).AddTicks(6345)
                        });
                });

            modelBuilder.Entity("Account.Domain.DataModels.AccountInformation", b =>
                {
                    b.HasOne("Account.Domain.DataModels.AccountCurrency", "AccountCurrency")
                        .WithMany()
                        .HasForeignKey("AccountCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Account.Domain.DataModels.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountCurrency");

                    b.Navigation("AccountType");
                });
#pragma warning restore 612, 618
        }
    }
}
